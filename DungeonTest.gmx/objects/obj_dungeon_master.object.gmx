<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize the dungeon

dungeon = dun_test;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Fade in

instance_create(0, 0, obj_fadein);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create the grid

randomize()

dungeon_map = ds_grid_create(32, 32);
dungeon_room_map = ds_grid_create(32, 32);
ds_grid_clear(dungeon_map, 1);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Generate the map

// Generate rooms

script_execute(dungeon);

for (index_y = 0; index_y &lt; 4; index_y += 1)
    {
        for (index_x = 0; index_x &lt; 4; index_x += 1)
            {
                scr_generate_room(index_x * 8, index_y * 8);
            }
    }
    
// Generate paths

scr_generate_paths();

// Draw map from grid

scr_draw_floor();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize turn queue

turn_queue = ds_queue_create();
next_turn_queue = ds_queue_create();


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create list of dead organisms

dead_organisms = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spawn player and stairs

while true
    {
        var stairs_h = irandom(31);
        var stairs_v = irandom(31);
        if (dungeon_map[# stairs_h, stairs_v] == UNOCCUPIED)
            { 
                var stairs_xpos = scr_coord_convert(stairs_h);
                var stairs_ypos = scr_coord_convert(stairs_v);
                
                stairs = instance_create(stairs_xpos, stairs_ypos, obj_stairs);
                dungeon_map[# stairs_h, stairs_v] = stairs;
                stairs.current_grid_xpos = stairs_h;
                stairs.current_grid_ypos = stairs_v;
                break;
            }
    }

scr_spawn(obj_player);

// Spawn enemies

var r = irandom_range(3, 6)
for (i = 0; i &lt;= r; i++) scr_spawn(obj_enemy_test);

// Create GUI

instance_create(x, y, obj_gui);

// Create minimap

instance_create(x, y, obj_minimap);

/*
while true
    {
        player_h = irandom(31);
        player_v = irandom(31);
        if (dungeon_map[# player_h, player_v] == UNOCCUPIED)
            { 
                player_xpos = scr_coord_convert(player_h);
                player_ypos = scr_coord_convert(player_v);
                
                instance_create(player_xpos, player_ypos, obj_player);
                dungeon_map[# player_h, player_v] = obj_player.object_map;
                obj_player.current_grid_xpos = player_h;
                obj_player.current_grid_ypos = player_v;
                break;
            }
    }
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Manage turns

// Check for dead objects
for (i = 0; i &lt;= ds_list_size(dead_organisms) - 1; i++)
    {
        if ds_queue_head(turn_queue) == dead_organisms[| i]
            {
                ds_queue_dequeue(turn_queue);
            }
    }

// Get rid of undefined
if ds_queue_head(turn_queue) == undefined ds_queue_dequeue(turn_queue);

// If the turn queue is empty, refill turn queue, update stats
if ds_queue_empty(turn_queue)
    {
        obj_organism.update_stats = true;
        while ds_queue_empty(next_turn_queue) == false
            {
                for (i = 0; i &lt;= ds_list_size(dead_organisms) - 1; i++)
                    {
                        if ds_queue_head(next_turn_queue) == dead_organisms[| i]
                            {
                                ds_queue_dequeue(next_turn_queue);
                            }
                    }
                ds_queue_enqueue(turn_queue, ds_queue_head(next_turn_queue));
                ds_queue_dequeue(next_turn_queue);
            }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
